# When done, submit this entire file to the autograder.

# Part 1

def sum arr
  # YOUR CODE HERE
  arr.inject(0, :+)
end

def max_2_sum arr
  # YOUR CODE HERE
  if arr.empty?
    0
  elsif arr.length==1
    arr[0]
  else
    arr2=arr.sort
    arr2[-1]+arr2[-2]
  end
end

def sum_to_n? arr, n
  # YOUR CODE HERE
  if arr.empty?
    FALSE
  elsif arr.length==1
    FALSE
  else
    arr.each do |i|
      if (arr-[i]).include?(n-i)
        return TRUE
      end
    end
    FALSE
  end
end

# Part 2

def hello(name)
  # YOUR CODE HERE
  'Hello, '.concat(name)
end

def starts_with_consonant? s
  # YOUR CODE HERE
  return FALSE if s.empty?
  return FALSE if not s[0]=~ /[[:alpha:]]/
  if ['A','E','I','O','U','a','e','i','o','u'].include?(s[0])
    FALSE
  else
    TRUE
  end
end

def binary_multiple_of_4? s
  # YOUR CODE HERE
  s.each_char do |i|
    return FALSE if not i=~ /[[:digit:]]/
  end
  if s.empty?
    FALSE
  elsif s.length==1
    return TRUE if ['0','4','8'].include?(s[0])
    return FALSE
  else
    ans=s[-1].to_i
    ans+=s[-2].to_i*10
    return TRUE if ans%4==0
    return FALSE
  end
end

# Part 3

class BookInStock
# YOUR CODE HERE
  attr_accessor:isbn
  attr_accessor:price
  def initialize(isbn='isbn1',price=33.8)
    raise ArgumentError if isbn.empty?
    raise ArgumentError if price<=0
    @isbn=isbn
    @price=price
  end
  def price_as_string
    '$'+format("%.2f",@price).to_s
  end
end